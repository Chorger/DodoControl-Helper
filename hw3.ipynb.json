{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3e9247fe",
   "metadata": {},
   "source": [
    "## Введение в машинное обучение\n",
    "\n",
    "## НИУ ВШЭ\n",
    "\n",
    "### Домашнее задание №3\n",
    "\n",
    "### О задании\n",
    "\n",
    "В этом домашнем задании вы реализуете решающее дерево и попрактикуетесь в решении задач классификации.\n",
    "\n",
    "### Оценивание и штрафы\n",
    "\n",
    "Оценка за ДЗ вычисляется по следующей формуле:\n",
    "\n",
    "$$\n",
    "\\text{points} \\times 10 / 14,\n",
    "$$\n",
    "\n",
    "где points — количество баллов за обязательную часть, которое вы набрали.\n",
    "\n",
    "__Внимание!__ Домашнее задание выполняется самостоятельно. «Похожие» решения считаются плагиатом и все задействованные студенты (в том числе те, у кого списали) не могут получить за него больше 0 баллов.\n",
    "\n",
    "Импортируйте все нужные вам функции ниже:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bfdd029d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier, plot_tree\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "from typing import Iterable, List, Tuple, Union\n",
    "from collections import Counter\n",
    "import warnings\n",
    "warnings.simplefilter('ignore')\n",
    "\n",
    "%matplotlib inline\n",
    "plt.rcParams[\"figure.figsize\"] = (11, 6.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93b75f40",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "31e3264e",
   "metadata": {},
   "source": [
    "# Решающее дерево своими руками (8 баллов + бонус)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0131c86d",
   "metadata": {},
   "source": [
    "В этой части для тестирования будем использовать датасет breast cancer. По предоставленной информации о ядрах клеток нужно предсказать присутствуют ли на изображении раковые клетки (класс 0) или нет (класс 1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c884d3c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "      <th>mean area cat</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>287</th>\n",
       "      <td>12.89</td>\n",
       "      <td>13.12</td>\n",
       "      <td>81.89</td>\n",
       "      <td>515.9</td>\n",
       "      <td>0.06955</td>\n",
       "      <td>0.03729</td>\n",
       "      <td>0.02260</td>\n",
       "      <td>0.01171</td>\n",
       "      <td>0.1337</td>\n",
       "      <td>0.05581</td>\n",
       "      <td>...</td>\n",
       "      <td>87.40</td>\n",
       "      <td>577.0</td>\n",
       "      <td>0.09616</td>\n",
       "      <td>0.1147</td>\n",
       "      <td>0.1186</td>\n",
       "      <td>0.05366</td>\n",
       "      <td>0.2309</td>\n",
       "      <td>0.06915</td>\n",
       "      <td>medium</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512</th>\n",
       "      <td>13.40</td>\n",
       "      <td>20.52</td>\n",
       "      <td>88.64</td>\n",
       "      <td>556.7</td>\n",
       "      <td>0.11060</td>\n",
       "      <td>0.14690</td>\n",
       "      <td>0.14450</td>\n",
       "      <td>0.08172</td>\n",
       "      <td>0.2116</td>\n",
       "      <td>0.07325</td>\n",
       "      <td>...</td>\n",
       "      <td>113.30</td>\n",
       "      <td>844.4</td>\n",
       "      <td>0.15740</td>\n",
       "      <td>0.3856</td>\n",
       "      <td>0.5106</td>\n",
       "      <td>0.20510</td>\n",
       "      <td>0.3585</td>\n",
       "      <td>0.11090</td>\n",
       "      <td>medium</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>12.96</td>\n",
       "      <td>18.29</td>\n",
       "      <td>84.18</td>\n",
       "      <td>525.2</td>\n",
       "      <td>0.07351</td>\n",
       "      <td>0.07899</td>\n",
       "      <td>0.04057</td>\n",
       "      <td>0.01883</td>\n",
       "      <td>0.1874</td>\n",
       "      <td>0.05899</td>\n",
       "      <td>...</td>\n",
       "      <td>96.31</td>\n",
       "      <td>621.9</td>\n",
       "      <td>0.09329</td>\n",
       "      <td>0.2318</td>\n",
       "      <td>0.1604</td>\n",
       "      <td>0.06608</td>\n",
       "      <td>0.3207</td>\n",
       "      <td>0.07247</td>\n",
       "      <td>medium</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>446</th>\n",
       "      <td>17.75</td>\n",
       "      <td>28.03</td>\n",
       "      <td>117.30</td>\n",
       "      <td>981.6</td>\n",
       "      <td>0.09997</td>\n",
       "      <td>0.13140</td>\n",
       "      <td>0.16980</td>\n",
       "      <td>0.08293</td>\n",
       "      <td>0.1713</td>\n",
       "      <td>0.05916</td>\n",
       "      <td>...</td>\n",
       "      <td>145.40</td>\n",
       "      <td>1437.0</td>\n",
       "      <td>0.14010</td>\n",
       "      <td>0.3762</td>\n",
       "      <td>0.6399</td>\n",
       "      <td>0.19700</td>\n",
       "      <td>0.2972</td>\n",
       "      <td>0.09075</td>\n",
       "      <td>largest</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>20.58</td>\n",
       "      <td>22.14</td>\n",
       "      <td>134.70</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>0.09090</td>\n",
       "      <td>0.13480</td>\n",
       "      <td>0.16400</td>\n",
       "      <td>0.09561</td>\n",
       "      <td>0.1765</td>\n",
       "      <td>0.05024</td>\n",
       "      <td>...</td>\n",
       "      <td>158.30</td>\n",
       "      <td>1656.0</td>\n",
       "      <td>0.11780</td>\n",
       "      <td>0.2920</td>\n",
       "      <td>0.3861</td>\n",
       "      <td>0.19200</td>\n",
       "      <td>0.2909</td>\n",
       "      <td>0.05865</td>\n",
       "      <td>largest</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "287        12.89         13.12           81.89      515.9          0.06955   \n",
       "512        13.40         20.52           88.64      556.7          0.11060   \n",
       "402        12.96         18.29           84.18      525.2          0.07351   \n",
       "446        17.75         28.03          117.30      981.6          0.09997   \n",
       "210        20.58         22.14          134.70     1290.0          0.09090   \n",
       "\n",
       "     mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "287           0.03729         0.02260              0.01171         0.1337   \n",
       "512           0.14690         0.14450              0.08172         0.2116   \n",
       "402           0.07899         0.04057              0.01883         0.1874   \n",
       "446           0.13140         0.16980              0.08293         0.1713   \n",
       "210           0.13480         0.16400              0.09561         0.1765   \n",
       "\n",
       "     mean fractal dimension  ...  worst perimeter  worst area  \\\n",
       "287                 0.05581  ...            87.40       577.0   \n",
       "512                 0.07325  ...           113.30       844.4   \n",
       "402                 0.05899  ...            96.31       621.9   \n",
       "446                 0.05916  ...           145.40      1437.0   \n",
       "210                 0.05024  ...           158.30      1656.0   \n",
       "\n",
       "     worst smoothness  worst compactness  worst concavity  \\\n",
       "287           0.09616             0.1147           0.1186   \n",
       "512           0.15740             0.3856           0.5106   \n",
       "402           0.09329             0.2318           0.1604   \n",
       "446           0.14010             0.3762           0.6399   \n",
       "210           0.11780             0.2920           0.3861   \n",
       "\n",
       "     worst concave points  worst symmetry  worst fractal dimension  \\\n",
       "287               0.05366          0.2309                  0.06915   \n",
       "512               0.20510          0.3585                  0.11090   \n",
       "402               0.06608          0.3207                  0.07247   \n",
       "446               0.19700          0.2972                  0.09075   \n",
       "210               0.19200          0.2909                  0.05865   \n",
       "\n",
       "     mean area cat  target  \n",
       "287         medium       1  \n",
       "512         medium       0  \n",
       "402         medium       1  \n",
       "446        largest       0  \n",
       "210        largest       0  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "breast_cancer = load_breast_cancer()\n",
    "X = pd.DataFrame(data=breast_cancer[\"data\"], columns=breast_cancer[\"feature_names\"])\n",
    "\n",
    "# добавим искуственный категориальный признак\n",
    "X['mean area cat'] = pd.qcut(X['mean area'], 5, labels=['smallest','small','medium','big', 'largest']).astype('object') \n",
    "\n",
    "X[\"target\"] = breast_cancer[\"target\"]\n",
    "X_train, X_test = train_test_split(X, test_size=0.25, random_state=42)\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2acde469",
   "metadata": {},
   "source": [
    "### 1. Оцениванием качество разбиения (1 балл)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a622c1b0",
   "metadata": {},
   "source": [
    "$R_m$ - множество объектов в разбиваемой вершине, $j$ - номер признака, по которому происходит разбиение, $t$ - порог разбиения.\n",
    "\n",
    "Критерий ошибки:\n",
    "\n",
    "$$\n",
    "Q(R_m, j, t) = \\frac{|R_\\ell|}{|R_m|}H(R_\\ell) + \\frac{|R_r|}{|R_m|}H(R_r) \\to \\min_{j, t}\n",
    "$$\n",
    "\n",
    "$R_\\ell$ - множество объектов в левом поддереве, $R_r$ - множество объектов в правом поддереве.\n",
    "\n",
    "$H(R)$ - критерий информативности, с помощью которого можно оценить качество распределения целевой переменной среди объектов множества $R$.\n",
    "\n",
    "Используйте функции для подсчета значения критерия ошибки, а также для разбиения вершины из семинара:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3457c75a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_node(R_m: np.ndarray, feature: str, t: float) -> Tuple[np.ndarray, np.ndarray]:\n",
    "    \"\"\"\n",
    "    Split a fixed set of objects R_m with given feature name and threshold t\n",
    "    \"\"\"\n",
    "    mask = R_m[feature] <= t\n",
    "    R_l = R_m.loc[mask]\n",
    "    R_r = R_m.loc[~mask]\n",
    "    return R_l, R_r\n",
    "\n",
    "\n",
    "def q_error(R_m: np.ndarray, feature: str, t: float) -> float:\n",
    "    \"\"\"\n",
    "    Compute error criterion for the given objects R_m, feature name and threshold t\n",
    "    \"\"\"\n",
    "    R_l, R_r = split_node(R_m, feature, t)\n",
    "    return  len(R_l) / len(R_m) * H(R_l['target']) + len(R_r) / len(R_m) * H(R_r['target'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdbf9386",
   "metadata": {},
   "source": [
    "__(0.5 балла)__ Реализуйте функцию для вычисления критерия информативности. На семинаре мы рассматривали решающее дерево для регрессии и в качестве критерия качества разбиения использовали дисперсию целевой переменной. Для классификации лучше использовать другие критерии, например энтропию:\n",
    "\n",
    "$$H(R) = -p_0\\log_{2}{p_0} -p_1\\log_{2}{p_1},$$ где $p_1$, $p_0$ — доля объектов среди $R$, которые относятся к классу 1 и 0 соответственно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "03854e78",
   "metadata": {},
   "outputs": [],
   "source": [
    "def H(y: np.ndarray) -> float:\n",
    "    \"\"\"\n",
    "    Compute entropy for vector y with classes of objects R\n",
    "        \n",
    "    \"\"\"\n",
    "    counts = np.bincount(y)\n",
    "    # Divide by the total column length to get a probability\n",
    "    probabilities = counts / len(y)\n",
    "    \n",
    "    # Initialize the entropy to 0\n",
    "    entropy = 0\n",
    "    # Loop through the probabilities, and add each one to the total entropy\n",
    "    for prob in probabilities:\n",
    "        if prob > 0:\n",
    "            # use log from math and set base to 2\n",
    "            entropy += prob * math.log(prob, 2)\n",
    "\n",
    "    return -entropy\n",
    "\n",
    "# Проверяем на простых примерах\n",
    "assert np.isclose(H([0,0,0,0,0,1]), 0.650022)\n",
    "assert np.isclose(H([0,0,0,0,0,0]), 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20a77c7f",
   "metadata": {},
   "source": [
    "__(0.5 балла)__ Выберите признак, который как вам кажется может быть полезен для предсказания и порог для него. Сравните значение критерия информативности для объектов выборки до разбиения и взвешенной суммы критериев информативности для объектов после разбиения ($Q(R_m,j,t)$). Какой можно сделать вывод?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23c7f909",
   "metadata": {},
   "outputs": [],
   "source": [
    "# your code here"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f07a9c1d",
   "metadata": {},
   "source": [
    "### 2. Ищем наилучшее разбиение (2 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aede0012",
   "metadata": {},
   "source": [
    "Теперь нужно найти наилучшее разбиение множества объектов $R_m$ в данной вершине, то есть такой порог $t$ для некоторого признака, где значение критерия ошибки $Q(R_m, j, t)$ минимально.\n",
    "\n",
    "__(1 балл)__ Модифицируйте функцию *get_optimal_split* из семинара так, чтобы:\n",
    "- Не было случаев, когда в одно из поддеревьев попадает 0 объектов \n",
    "- В качестве порога использовалось среднее двух различных соседних (при сортировке) значений признака \n",
    "- При одинаковых значениях критерия ошибки выбирался минимальный сплит \n",
    "\n",
    "__(Бонусные 0.5 балла)__ Перепешите функцию так, чтобы не использовались циклы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "60d1bc92",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_optimal_split(R_m: np.array, feature: str) -> Tuple[float, List[float]]:\n",
    "    \"\"\"\n",
    "    Find best split of objects R_m by feature and return minimal q_error (opt_q_error), best threshold (opt_threshold) and array of error criterions (Q_array)\n",
    "        \n",
    "    \"\"\"\n",
    "    Q_array = []\n",
    "    feature_values = np.unique(R_m[feature])\n",
    "    \n",
    "    for t in feature_values:\n",
    "        Q_array.append(q_error(R_m, feature, t))\n",
    "        \n",
    "    Q_array = np.nan_to_num(Q_array, nan=float(\"+inf\"))\n",
    "    \n",
    "    minimum_id = np.argmin(Q_array)\n",
    "    opt_threshold = feature_values[minimum_id]\n",
    "    opt_q_error = Q_array[minimum_id]\n",
    "    \n",
    "    return opt_threshold, opt_q_error, Q_array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d944e20c",
   "metadata": {},
   "source": [
    "__(0.25 балла)__ Постройте график зависимости критерия ошибки от выбранного порога для того же признака что и в 1ом задании и отметьте точку где достигается минимум."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de0137fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# your code here"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a020d500",
   "metadata": {},
   "source": [
    "__(0.75 балла)__ Найдите признак с минимальным значением критерия ошибки. Постройте на одном графике распределения значений этого признака для нулевого и первого класса (можно использовть seaborn) и добавьте прямую указывающую местоположение порога. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87665c0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# your code here"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6783c71e",
   "metadata": {},
   "source": [
    "### 3. Строим дерево (5 баллов)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86501fcf",
   "metadata": {},
   "source": [
    "Теперь можно реализовать алгоритм целиком. Начинаем строить дерево с корня. В корне дерева находится вся обучающая выборка. Затем используем жадный алгоритм:\n",
    "\n",
    "0. Проверяем критерий остановки - все элементы в вершине относятся к одному классу, ни по одному признаку нельзя разбить выборку, достигнута максимальная глубина дерева и пр.\n",
    "\n",
    "1. Cреди всех признаков выбираем признак с минимальным значением критерия ошибки.\n",
    "\n",
    "2. Разбиваем выборку на две подвыборки по наилучшему порогу для этого признака и из этих подвыборок получаем две новые дочерние вершины. \n",
    "\n",
    "3. Для каждой из них рекурсивно потворяем аналогичные действия."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa702d65",
   "metadata": {},
   "source": [
    "__(3 балла)__ Заполните пропущенные строчки в функции __fit_node_ и реализуйте функцию __predict_node_."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "2a6e7820",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "\n",
    "class DecisionTree:\n",
    "    def __init__(\n",
    "        self, \n",
    "        feature_types: Union[List[str], np.ndarray], \n",
    "        max_depth: int = None, \n",
    "        min_samples_split: int = None, \n",
    "        min_samples_leaf: int = None\n",
    "    ) -> None:\n",
    "        \n",
    "        if np.any(list(map(lambda x: x not in ('int64', 'float64', 'object'), feature_types))):\n",
    "            raise ValueError(\"There is unknown feature type\")\n",
    "\n",
    "        # В этой переменной будем хранить узлы решающего дерева. Каждая вершина хранит в себе идентификатор того,\n",
    "        # является ли она листовой (\"terminal\" или \"nonterminal\"). Листовые вершины хранят значение класса для предсказания, \n",
    "        # нелистовые - правого и левого детей (поддеревья для продолжения процедуры предсказания)\n",
    "        self._tree = {\"depth\":0}\n",
    "        \n",
    "        # типы признаков (категориальные или числовые)\n",
    "        self._feature_types = feature_types\n",
    "        \n",
    "        # гиперпараметры дерева\n",
    "        self._max_depth = max_depth\n",
    "        self._min_samples_split = min_samples_split\n",
    "        self._min_samples_leaf = min_samples_leaf\n",
    "\n",
    "    def _fit_node(\n",
    "        self, \n",
    "        sub: pd.DataFrame, # подмножество объектов для данной вершины\n",
    "        node: dict        # словарь для хранения информации о вершине\n",
    "    ) -> None:\n",
    "        \n",
    "        # критерий остановки - проверяем что не все классы объектов в данной вершине одинаковы\n",
    "        if np.all(sub['target'] == sub['target'].iloc[0]):\n",
    "            node[\"type\"] = \"terminal\"\n",
    "            node[\"class\"] = sub['target'].iloc[0]\n",
    "            return\n",
    "        \n",
    "        \n",
    "        # ищем лучший признак для разбиения\n",
    "        feature_best, threshold_best, q_best = None, None, None\n",
    "        for feature in sub.columns[:-1]:\n",
    "            #feature_type = self._feature_types[feature]\n",
    "              \n",
    "            # ищем оптимальный порог для текущего признака\n",
    "            threshold, q, q_array = get_optimal_split(sub, feature)\n",
    "            if q_best is None:\n",
    "                feature_best = feature\n",
    "                threshold_best = threshold\n",
    "                q_best = q\n",
    "            elif q < q_best:\n",
    "                feature_best = feature\n",
    "                threshold_best = threshold\n",
    "                q_best = q\n",
    "\n",
    "        # выбираем класс для листовой вершины\n",
    "        if feature_best is None or node[\"depth\"] == self._max_depth:\n",
    "            node[\"type\"] = \"terminal\"\n",
    "            node[\"class\"] = Counter(sub['target']).most_common(1)[0][0]\n",
    "            return\n",
    "        \n",
    "        # записываем полученное разбиение в атрибуты класса\n",
    "        node[\"type\"] = \"nonterminal\"\n",
    "        node[\"feature_split\"] = feature_best\n",
    "        node[\"threshold\"] = threshold_best\n",
    "        sub_l, sub_r = split_node(sub, feature_best, threshold_best)\n",
    "\n",
    "        # запускаем рекурсию\n",
    "        node[\"left_child\"], node[\"right_child\"] = {\"depth\": node[\"depth\"]+1}, {\"depth\": node[\"depth\"]+1}\n",
    "        self._fit_node(sub_l, node[\"left_child\"])\n",
    "        self._fit_node(sub_r, node[\"right_child\"])\n",
    "\n",
    "    def _predict_node(self, x: pd.Series, node: dict) -> int:\n",
    "        \"\"\"\n",
    "        Предсказание начинается с корневой вершины дерева и рекурсивно идёт в левое или правое поддерево в зависимости от значения\n",
    "        предиката на объекте. Листовая вершина возвращает предсказание.\n",
    "        :param x: pd.Series, элемент выборки\n",
    "        :param node: dict, вершина дерева\n",
    "        \"\"\"\n",
    "        if node[\"type\"] == \"terminal\":\n",
    "            return node[\"class\"]\n",
    "\n",
    "        if x[node[\"feature_split\"]] > node[\"threshold\"]:\n",
    "            # Right child\n",
    "            y_pred = self._predict_node(x, node[\"right_child\"])\n",
    "        else: \n",
    "            # Left child\n",
    "            y_pred = self._predict_node(x, node[\"left_child\"])\n",
    "            \n",
    "        return y_pred\n",
    "        \n",
    "\n",
    "    def fit(self, X: pd.DataFrame, y: np.ndarray) -> None:\n",
    "        X['target'] = y\n",
    "        for i in np.where(X.dtypes.values == \"O\"):\n",
    "            le = preprocessing.LabelEncoder()\n",
    "            col = X.columns.values[i][0]\n",
    "            X[col] = le.fit_transform(X[col])\n",
    "            \n",
    "        self._fit_node(X, self._tree)\n",
    "\n",
    "    def predict(self, X: pd.DataFrame) -> pd.Series:\n",
    "        predicted = []\n",
    "        for ind, x in X.iterrows():\n",
    "            predicted.append(self._predict_node(x, self._tree))\n",
    "            \n",
    "        return np.array(predicted)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7697c14c",
   "metadata": {},
   "source": [
    "__(1 балл)__ Обучите решающее дерево на обучающей части датасета (исключив колонку \"mean area cat\") и сравните accuracy полученную на обучающей и тестовой части. Совпадают ли топовые признаки с минимальным значением ошибки из предпредыдущего задания с признаками по которым произошли разбиения в дереве?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "699edcf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_cur = X_train[\"target\"]\n",
    "X_train_cur = X_train.drop(columns=[\"target\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "a8039bd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "      <th>mean area cat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>287</th>\n",
       "      <td>12.890</td>\n",
       "      <td>13.12</td>\n",
       "      <td>81.89</td>\n",
       "      <td>515.9</td>\n",
       "      <td>0.06955</td>\n",
       "      <td>0.03729</td>\n",
       "      <td>0.02260</td>\n",
       "      <td>0.01171</td>\n",
       "      <td>0.1337</td>\n",
       "      <td>0.05581</td>\n",
       "      <td>...</td>\n",
       "      <td>15.54</td>\n",
       "      <td>87.40</td>\n",
       "      <td>577.0</td>\n",
       "      <td>0.09616</td>\n",
       "      <td>0.11470</td>\n",
       "      <td>0.11860</td>\n",
       "      <td>0.05366</td>\n",
       "      <td>0.2309</td>\n",
       "      <td>0.06915</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512</th>\n",
       "      <td>13.400</td>\n",
       "      <td>20.52</td>\n",
       "      <td>88.64</td>\n",
       "      <td>556.7</td>\n",
       "      <td>0.11060</td>\n",
       "      <td>0.14690</td>\n",
       "      <td>0.14450</td>\n",
       "      <td>0.08172</td>\n",
       "      <td>0.2116</td>\n",
       "      <td>0.07325</td>\n",
       "      <td>...</td>\n",
       "      <td>29.66</td>\n",
       "      <td>113.30</td>\n",
       "      <td>844.4</td>\n",
       "      <td>0.15740</td>\n",
       "      <td>0.38560</td>\n",
       "      <td>0.51060</td>\n",
       "      <td>0.20510</td>\n",
       "      <td>0.3585</td>\n",
       "      <td>0.11090</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>12.960</td>\n",
       "      <td>18.29</td>\n",
       "      <td>84.18</td>\n",
       "      <td>525.2</td>\n",
       "      <td>0.07351</td>\n",
       "      <td>0.07899</td>\n",
       "      <td>0.04057</td>\n",
       "      <td>0.01883</td>\n",
       "      <td>0.1874</td>\n",
       "      <td>0.05899</td>\n",
       "      <td>...</td>\n",
       "      <td>24.61</td>\n",
       "      <td>96.31</td>\n",
       "      <td>621.9</td>\n",
       "      <td>0.09329</td>\n",
       "      <td>0.23180</td>\n",
       "      <td>0.16040</td>\n",
       "      <td>0.06608</td>\n",
       "      <td>0.3207</td>\n",
       "      <td>0.07247</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>446</th>\n",
       "      <td>17.750</td>\n",
       "      <td>28.03</td>\n",
       "      <td>117.30</td>\n",
       "      <td>981.6</td>\n",
       "      <td>0.09997</td>\n",
       "      <td>0.13140</td>\n",
       "      <td>0.16980</td>\n",
       "      <td>0.08293</td>\n",
       "      <td>0.1713</td>\n",
       "      <td>0.05916</td>\n",
       "      <td>...</td>\n",
       "      <td>38.54</td>\n",
       "      <td>145.40</td>\n",
       "      <td>1437.0</td>\n",
       "      <td>0.14010</td>\n",
       "      <td>0.37620</td>\n",
       "      <td>0.63990</td>\n",
       "      <td>0.19700</td>\n",
       "      <td>0.2972</td>\n",
       "      <td>0.09075</td>\n",
       "      <td>largest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>20.580</td>\n",
       "      <td>22.14</td>\n",
       "      <td>134.70</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>0.09090</td>\n",
       "      <td>0.13480</td>\n",
       "      <td>0.16400</td>\n",
       "      <td>0.09561</td>\n",
       "      <td>0.1765</td>\n",
       "      <td>0.05024</td>\n",
       "      <td>...</td>\n",
       "      <td>27.84</td>\n",
       "      <td>158.30</td>\n",
       "      <td>1656.0</td>\n",
       "      <td>0.11780</td>\n",
       "      <td>0.29200</td>\n",
       "      <td>0.38610</td>\n",
       "      <td>0.19200</td>\n",
       "      <td>0.2909</td>\n",
       "      <td>0.05865</td>\n",
       "      <td>largest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>8.888</td>\n",
       "      <td>14.64</td>\n",
       "      <td>58.79</td>\n",
       "      <td>244.0</td>\n",
       "      <td>0.09783</td>\n",
       "      <td>0.15310</td>\n",
       "      <td>0.08606</td>\n",
       "      <td>0.02872</td>\n",
       "      <td>0.1902</td>\n",
       "      <td>0.08980</td>\n",
       "      <td>...</td>\n",
       "      <td>15.67</td>\n",
       "      <td>62.56</td>\n",
       "      <td>284.4</td>\n",
       "      <td>0.12070</td>\n",
       "      <td>0.24360</td>\n",
       "      <td>0.14340</td>\n",
       "      <td>0.04786</td>\n",
       "      <td>0.2254</td>\n",
       "      <td>0.10840</td>\n",
       "      <td>smallest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>11.640</td>\n",
       "      <td>18.33</td>\n",
       "      <td>75.17</td>\n",
       "      <td>412.5</td>\n",
       "      <td>0.11420</td>\n",
       "      <td>0.10170</td>\n",
       "      <td>0.07070</td>\n",
       "      <td>0.03485</td>\n",
       "      <td>0.1801</td>\n",
       "      <td>0.06520</td>\n",
       "      <td>...</td>\n",
       "      <td>29.26</td>\n",
       "      <td>85.51</td>\n",
       "      <td>521.7</td>\n",
       "      <td>0.16880</td>\n",
       "      <td>0.26600</td>\n",
       "      <td>0.28730</td>\n",
       "      <td>0.12180</td>\n",
       "      <td>0.2806</td>\n",
       "      <td>0.09097</td>\n",
       "      <td>small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>14.290</td>\n",
       "      <td>16.82</td>\n",
       "      <td>90.30</td>\n",
       "      <td>632.6</td>\n",
       "      <td>0.06429</td>\n",
       "      <td>0.02675</td>\n",
       "      <td>0.00725</td>\n",
       "      <td>0.00625</td>\n",
       "      <td>0.1508</td>\n",
       "      <td>0.05376</td>\n",
       "      <td>...</td>\n",
       "      <td>20.65</td>\n",
       "      <td>94.44</td>\n",
       "      <td>684.6</td>\n",
       "      <td>0.08567</td>\n",
       "      <td>0.05036</td>\n",
       "      <td>0.03866</td>\n",
       "      <td>0.03333</td>\n",
       "      <td>0.2458</td>\n",
       "      <td>0.06120</td>\n",
       "      <td>big</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>13.980</td>\n",
       "      <td>19.62</td>\n",
       "      <td>91.12</td>\n",
       "      <td>599.5</td>\n",
       "      <td>0.10600</td>\n",
       "      <td>0.11330</td>\n",
       "      <td>0.11260</td>\n",
       "      <td>0.06463</td>\n",
       "      <td>0.1669</td>\n",
       "      <td>0.06544</td>\n",
       "      <td>...</td>\n",
       "      <td>30.80</td>\n",
       "      <td>113.90</td>\n",
       "      <td>869.3</td>\n",
       "      <td>0.16130</td>\n",
       "      <td>0.35680</td>\n",
       "      <td>0.40690</td>\n",
       "      <td>0.18270</td>\n",
       "      <td>0.3179</td>\n",
       "      <td>0.10550</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>12.180</td>\n",
       "      <td>20.52</td>\n",
       "      <td>77.22</td>\n",
       "      <td>458.7</td>\n",
       "      <td>0.08013</td>\n",
       "      <td>0.04038</td>\n",
       "      <td>0.02383</td>\n",
       "      <td>0.01770</td>\n",
       "      <td>0.1739</td>\n",
       "      <td>0.05677</td>\n",
       "      <td>...</td>\n",
       "      <td>32.84</td>\n",
       "      <td>84.58</td>\n",
       "      <td>547.8</td>\n",
       "      <td>0.11230</td>\n",
       "      <td>0.08862</td>\n",
       "      <td>0.11450</td>\n",
       "      <td>0.07431</td>\n",
       "      <td>0.2694</td>\n",
       "      <td>0.06878</td>\n",
       "      <td>small</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>426 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "287       12.890         13.12           81.89      515.9          0.06955   \n",
       "512       13.400         20.52           88.64      556.7          0.11060   \n",
       "402       12.960         18.29           84.18      525.2          0.07351   \n",
       "446       17.750         28.03          117.30      981.6          0.09997   \n",
       "210       20.580         22.14          134.70     1290.0          0.09090   \n",
       "..           ...           ...             ...        ...              ...   \n",
       "71         8.888         14.64           58.79      244.0          0.09783   \n",
       "106       11.640         18.33           75.17      412.5          0.11420   \n",
       "270       14.290         16.82           90.30      632.6          0.06429   \n",
       "435       13.980         19.62           91.12      599.5          0.10600   \n",
       "102       12.180         20.52           77.22      458.7          0.08013   \n",
       "\n",
       "     mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "287           0.03729         0.02260              0.01171         0.1337   \n",
       "512           0.14690         0.14450              0.08172         0.2116   \n",
       "402           0.07899         0.04057              0.01883         0.1874   \n",
       "446           0.13140         0.16980              0.08293         0.1713   \n",
       "210           0.13480         0.16400              0.09561         0.1765   \n",
       "..                ...             ...                  ...            ...   \n",
       "71            0.15310         0.08606              0.02872         0.1902   \n",
       "106           0.10170         0.07070              0.03485         0.1801   \n",
       "270           0.02675         0.00725              0.00625         0.1508   \n",
       "435           0.11330         0.11260              0.06463         0.1669   \n",
       "102           0.04038         0.02383              0.01770         0.1739   \n",
       "\n",
       "     mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
       "287                 0.05581  ...          15.54            87.40       577.0   \n",
       "512                 0.07325  ...          29.66           113.30       844.4   \n",
       "402                 0.05899  ...          24.61            96.31       621.9   \n",
       "446                 0.05916  ...          38.54           145.40      1437.0   \n",
       "210                 0.05024  ...          27.84           158.30      1656.0   \n",
       "..                      ...  ...            ...              ...         ...   \n",
       "71                  0.08980  ...          15.67            62.56       284.4   \n",
       "106                 0.06520  ...          29.26            85.51       521.7   \n",
       "270                 0.05376  ...          20.65            94.44       684.6   \n",
       "435                 0.06544  ...          30.80           113.90       869.3   \n",
       "102                 0.05677  ...          32.84            84.58       547.8   \n",
       "\n",
       "     worst smoothness  worst compactness  worst concavity  \\\n",
       "287           0.09616            0.11470          0.11860   \n",
       "512           0.15740            0.38560          0.51060   \n",
       "402           0.09329            0.23180          0.16040   \n",
       "446           0.14010            0.37620          0.63990   \n",
       "210           0.11780            0.29200          0.38610   \n",
       "..                ...                ...              ...   \n",
       "71            0.12070            0.24360          0.14340   \n",
       "106           0.16880            0.26600          0.28730   \n",
       "270           0.08567            0.05036          0.03866   \n",
       "435           0.16130            0.35680          0.40690   \n",
       "102           0.11230            0.08862          0.11450   \n",
       "\n",
       "     worst concave points  worst symmetry  worst fractal dimension  \\\n",
       "287               0.05366          0.2309                  0.06915   \n",
       "512               0.20510          0.3585                  0.11090   \n",
       "402               0.06608          0.3207                  0.07247   \n",
       "446               0.19700          0.2972                  0.09075   \n",
       "210               0.19200          0.2909                  0.05865   \n",
       "..                    ...             ...                      ...   \n",
       "71                0.04786          0.2254                  0.10840   \n",
       "106               0.12180          0.2806                  0.09097   \n",
       "270               0.03333          0.2458                  0.06120   \n",
       "435               0.18270          0.3179                  0.10550   \n",
       "102               0.07431          0.2694                  0.06878   \n",
       "\n",
       "     mean area cat  \n",
       "287         medium  \n",
       "512         medium  \n",
       "402         medium  \n",
       "446        largest  \n",
       "210        largest  \n",
       "..             ...  \n",
       "71        smallest  \n",
       "106          small  \n",
       "270            big  \n",
       "435         medium  \n",
       "102          small  \n",
       "\n",
       "[426 rows x 31 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_cur"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "293069f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = DecisionTree(X_train_cur.dtypes.values, 8, 3, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "5196f782",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.fit(X_train_cur, y_train_cur)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "96c9e2a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_preds = model.predict(X_train_cur)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "050bf2e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(train_preds == y_train_cur) / len(train_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "4230869c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_cur = X_test[\"target\"]\n",
    "X_test_cur = X_test.drop(columns=[\"target\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "c7f394be",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_preds = model.predict(X_test_cur)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "51663430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9370629370629371"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(test_preds == y_test_cur) / len(test_preds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72488cc6",
   "metadata": {},
   "source": [
    "__(1 балл)__ Как будет происходить разбиение в вершине дерева по категориальному признаку? Является ли оно эффективным? Исправьте одну из функций выше так, чтобы дерево не выдавало ошибку при обучении на датасете с категориальными признаками. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "145c1fe4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Исправлено!\n"
     ]
    }
   ],
   "source": [
    "print(\"Исправлено!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dd9e461",
   "metadata": {},
   "source": [
    "# Практическая часть (6 баллов)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "073d5436",
   "metadata": {},
   "source": [
    "__(2 балла)__ В этом задании нужно для того же датасета обучить несколько алгоритмов с помощью кросс-валидации и сравнить их качество по ROC AUC, accuracy и f1-score. Не забудьте удалить дополнительные колонки, которые были добавлены ранее.\n",
    "\n",
    "1. Обучите и нарисуйте решающее дерево c глубиной 3. Настройте font_size или общий размер графика чтобы названия признаков были читабельны. Сравните его с деревом, которое вы написали самостоятельно. Для решающего дерева подберите оптимальный max_depth и min_samples_split по выбранной метрике.\n",
    "\n",
    "2. Обучите логистическую регрессию c L2 регуляризацией и подберите для нее наилучший параметр.\n",
    "\n",
    "3. Обучите SVM и выберите наиболее подходящее ядро и параметр регуляриации.\n",
    "\n",
    "\n",
    "Выберите метрику, по которой вы будете выбирать наилучшие параметры. Почему для этого датасета стоит сравнивать предсказания не только по значению accuracy? Что важнее для этой задачи - оптимизировать precision или recall? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "318f9635",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "18a95f1b",
   "metadata": {},
   "source": [
    "Теперь загрузим еще один [датасет](https://www.kaggle.com/datasets/rashmiranu/banking-dataset-classification). По данным о клиентам банка нужно предсказать будет ли клиент брать кредит на длительный срок или нет. И если да, то сотрудники банка позвонят и предложат ему кредит. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "54fc912a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>49</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.9y</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>nov</td>\n",
       "      <td>wed</td>\n",
       "      <td>227</td>\n",
       "      <td>4</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>nov</td>\n",
       "      <td>wed</td>\n",
       "      <td>202</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>1</td>\n",
       "      <td>failure</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>retired</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.4y</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>jul</td>\n",
       "      <td>mon</td>\n",
       "      <td>1148</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>120</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>59</td>\n",
       "      <td>retired</td>\n",
       "      <td>divorced</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>jun</td>\n",
       "      <td>tue</td>\n",
       "      <td>368</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job   marital          education  default housing loan  \\\n",
       "0   49   blue-collar   married           basic.9y  unknown      no   no   \n",
       "1   37  entrepreneur   married  university.degree       no      no   no   \n",
       "2   78       retired   married           basic.4y       no      no   no   \n",
       "3   36        admin.   married  university.degree       no     yes   no   \n",
       "4   59       retired  divorced  university.degree       no      no   no   \n",
       "\n",
       "     contact month day_of_week  duration  campaign  pdays  previous  \\\n",
       "0   cellular   nov         wed       227         4    999         0   \n",
       "1  telephone   nov         wed       202         2    999         1   \n",
       "2   cellular   jul         mon      1148         1    999         0   \n",
       "3  telephone   may         mon       120         2    999         0   \n",
       "4   cellular   jun         tue       368         2    999         0   \n",
       "\n",
       "      poutcome    y  \n",
       "0  nonexistent   no  \n",
       "1      failure   no  \n",
       "2  nonexistent  yes  \n",
       "3  nonexistent   no  \n",
       "4  nonexistent   no  "
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('new_train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdb350b7",
   "metadata": {},
   "source": [
    "__(0.5 балла)__ Изучите и подготовьте данные - проверьте типы колонок, соотношение классов, наличие пропусков (пропуски для категориальных переменных указаны как 'unknown'), повторяющихся объектов, проверьте частоты значений признаков и их смысл - возможно какие-то признаки можно удалить. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dea0e143",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e166d9a8",
   "metadata": {},
   "source": [
    "__(0.5 балла)__ Постройте графики с распределениями по каждому из категориальных признаков. Статистики должны быть выведены для обоих классов и либо расположены на одном графике, либо находиться на соседних графиках, чтобы можно было сравнить их между собой. Вам поможет plt.subplot(s) если вы используете matplotlib или продвинутые функции из seaborn, позволяющие автоматически строить сразу несколько графиков. Убедитесь что на графиках подписаны оси, все надписи читабельны и пр. Проанализируйте полученные результаты."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4ae717b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b0feb3b9",
   "metadata": {},
   "source": [
    "__(0.5 балла)__ Проведите анализ числовых признаков - постройте попарные графики для признаков и график с корреляцией Пирсона."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eedfeeb4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "51cec0e6",
   "metadata": {},
   "source": [
    "__(0.5 балл)__ Преобразуйте категориальные признаки. Подумайте какие признаки лучше закодировать с помощью one-hot encoding, а какие с помощью label-encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b03a490e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8dd1dccd",
   "metadata": {},
   "source": [
    "__(1 балл)__ В этом датасете отношение между положительными примерами и отрицательными практически 1:8. Поэтому хорошей идеей будет сбалансировать датасет (oversampling - добавить элементы менее популярного класса на основе имеющихся или undersampling - наоборот убрать элементы более популярного класса. см. [imblearn](https://imbalanced-learn.org/stable/over_sampling.html#a-practical-guide)) или пропорционально изменить веса классов в самих моделях (параметр class_weight), а также использовать чувствительные к таким случаям метрики. \n",
    "\n",
    "Разбейте датасет на train и test, используйте параметр stratify, чтобы соотношение классов не изменилось после разбиения датасета на две части. Аналогично в дальнейшем при использовании кросс-валидации используйте версию функции сохраняющую соотношение классов (StratifiedKFold). \n",
    "\n",
    "Подберите параметры логистической регрессии и решающего дерева с помощью кросс-валидации по AUC PR (площадь под Precision-Recall кривой). Для тестовой части датасета выведите получившиеся значения AUC PR, f1-score, PR-кривую и выведите матрицы для истинных значений и предсказаний (confusion matrix). Их можно красиво вывести с помощью seaborn.heatmap(). На что стоит больше обращать внимание - на ошибку первого или второго рода?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7944675a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "1d985808",
   "metadata": {},
   "source": [
    "__(0.5 балла)__ Рассмотрим задачу с точки зрения прибыли для банка. Маркетинговая компания требует значительных финансовых затрат, и ее эффективность напрямую зависит от качества нашей модели. Поэтому в качестве дополнительной метрики качества разумно использовать общую прибыль банка в той или иной форме. Мы будем рассматривать очень простую модель. Пусть каждый клиент после возврата всех процентов по кредиту (и с учетом всех расходов на обслуживание) приносит банку в среднем 10000 у.е., затраты на привлечение одного клиента составляют 100 у.е. Тогда сколько составит прибыль банка (доходы - расходы) если работники банка свяжутся со всеми клиентами, которых предсказала наша лучшая модель как подходящих на тестовой части и они все согласятся открыть кредит? Сколько составят расходы на маркетинг? В данной модели мы не учитываем что кредит может быть не возвращен в срок."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f2e119b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "48090335",
   "metadata": {},
   "source": [
    "__(0.5 балла)__ Снова используйте кросс-валидацию с пятью подвыборками. Обучите логистическую регрессию и выведите пять значений прибыли, а также подсчитайте среднее значение. Постройте графики зависимости среднего значения прибыли и AUC PR от параметра регуляризации."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f62616cd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
